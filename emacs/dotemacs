;; locale coding
(setq locale-coding-system'utf-8)
(prefer-coding-system'utf-8)
(set-keyboard-coding-system'utf-8)
(set-terminal-coding-system'utf-8)
(set-selection-coding-system'utf-8)
(set-clipboard-coding-system 'ctext)
(set-buffer-file-coding-system 'utf-8)
(setq tab-width 4 indent-tabs-mode nil)

;;c++ related
(add-hook 'c++-mode-hook
      '(lambda ( )
         (c-toggle-hungry-state)))
(setq c-default-style "linux"
          c-basic-offset 4)
;(add-hook 'c++-mode-hook
;      '(lambda ( )
;         (flyspell-prog-mode)))

;(add-hook 'c++-mode-hook
;      '(lambda ( )
;         (c-set-style "vespa")))


(setq auto-mode-alist
     (cons '("\\.h\\'" . c++-mode) auto-mode-alist))
(add-to-list 'auto-mode-alist
'("\\..pp\\'" . c++-mode))

(add-to-list 'auto-mode-alist
'("\\.ll\\'" . c++-mode))

(add-to-list 'auto-mode-alist
'("\\.yy\\'" . c++-mode))

;;c-mode related
(add-hook 'c-mode-hook
      '(lambda ( )
         (c-toggle-hungry-state)))

;;customized key bindings following

;;; uncomment this line to disable loading of "default.el" at startup
;; (setq inhibit-default-init t)

;; turn on font-lock mode
(when (fboundp 'global-font-lock-mode)
  (global-font-lock-mode t))

;; enable visual feedback on selections
;(setq transient-mark-mode t)

;; default to better frame titles
(setq frame-title-format
      (concat  "%b - emacs@" (system-name)))

;; default to unified diffs
(setq diff-switches "-u")


;;set line number
(setq column-number-mode t)
(setq line-number-mode t)

;;parentheses settings
(show-paren-mode t)
(setq show-paren-style 'parentheses)

;;transient-mark-mode
(setq transient-mark-mode t);

;;eshell settings
(defun open-eshell-other-buffer()
  "Open eshell in other buffer"
  (interactive)
  (split-window-vertically)
  (eshell))
(global-set-key [f8] 'open-eshell-other-buffer)
(global-set-key [C-f8] 'eshell)

(require 'ansi-color)
(add-hook 'compilation-filter-hook
          '(lambda ()
             (let ((min (point-min-marker))
                   (max (point-max-marker)))
               (ansi-color-apply-on-region min max))))

(setq backup-by-copying-when-linked t)
(setq compilation-scroll-output t)
(setq truncate-partial-width-windows nil)
(setq make-backup-files nil)

;; set yasnippet
(add-to-list 'load-path
             "~/.emacs.d/plugins")

;; set snippet
(require 'yasnippet-bundle)

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ansi-color-names-vector ["#242424" "#e5786d" "#95e454" "#cae682" "#8ac6f2" "#333366" "#ccaa8f" "#f6f3e8"])
 '(custom-enabled-themes (quote (tsdh-dark)))
 '(semantic-mode t))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )

;; set color theme
(add-to-list 'load-path
	     "~/.emacs.d/plugins/color-theme")
(require 'color-theme)
(color-theme-initialize)
(color-theme-tangotango)

;; set select file or buffer
;; do not use (ido-mode 1) which has a recurise load bug
(require 'ido)
(add-hook 'term-setup-hook 'ido-mode)

;; set tool-bar
(tool-bar-mode 0)

;; set menu-bar
(menu-bar-mode 0)

;; set max windows when boot
(require 'maxframe)
(add-hook 'window-setup-hook 'maximize-frame t)

;set autocomplete
;(require 'auto-complete)
;(global-auto-complete-mode t)

(add-to-list 'load-path "~/.emacs.d")
(require 'auto-complete-config)
(add-to-list 'ac-dictionary-directories "~/.emacs.d/ac-dict")
(ac-config-default)

;; set key binding
(global-set-key [C-f2] 'split-window-horizontally)
(global-set-key [C-f3] 'delete-other-windows)
(global-set-key [C-f4] 'delete-window)
(global-set-key [C-f6] 'split-window-vertically)
(global-set-key  [C-left] 'windmove-left)
(global-set-key  [C-right] 'windmove-right)

(add-to-list 'load-path "~/.emacs.d/elpa")
(require 'package)
(add-to-list 'package-archives
             '("marmalade" . "http://marmalade-repo.org/packages/"))
(package-initialize)

;; anything keyboard
(global-set-key [C-return] 'anything)

;; diable scroll-bar
(scroll-bar-mode 0)

;; clojure-mode
(require 'clojure-mode)

;; (require 'paredit) if you didn't install via package.el
(defun turn-on-paredit () (paredit-mode 1))
(add-hook 'clojure-mode-hook 'turn-on-paredit)
(add-hook 'emacs-lisp-mode-hook 'turn-on-paredit)

;; font size
(set-face-attribute 'default nil :height 120)

;; clipborad shared
(setq x-select-enable-clipboard t)

;; forward-whitespace
(require 'thingatpt)
(global-set-key (kbd "C-,") 'forward-whitespace)
