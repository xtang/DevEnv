(require 'package)
; package
(dolist (source '(("marmalade" . "http://marmalade-repo.org/packages/")
                  ("melpa" . "http://melpa.milkbox.net/packages/")))
  (add-to-list 'package-archives source t))
(package-initialize)

(require 'google-c-style)
(require 'color-theme)
(require 'multi-term)
(require 'go-autocomplete)
(require 'auto-complete-config)
(require 'handlebars-mode)
(require 'grep-o-matic)

;; ac
(ac-config-default)
(setq ac-auto-show-menu 0.3
      ac-fuzzy-enable t
      ac-quick-help-delay 0.4           ;show doc quickly
      ac-use-menu-map t)

;; color theme
(color-theme-initialize)
(color-theme-tangotango)

;; clip-board share
(setq x-select-enable-clipboard)

;; locale coding
(setq locale-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(set-clipboard-coding-system 'ctext)
(set-buffer-file-coding-system 'utf-8)

;; set linum vim style 
; (fringe-mode 0)
(setq linum-format " %d ")

;; backup
(setq make-backup-files nil)

; prog-mode
(add-hook 'c++-mode-hook 'esk-prog-mode-hook)
(add-hook 'c++-mode-hook '(lambda () (setq show-trailing-whitespace t)))
(add-hook 'java-mode-hook 'esk-prog-mode-hook)
(add-hook 'java-mode-hook '(lambda () (setq show-trailing-whitespace t)))
(add-hook 'java-mode-hook '(lambda () (setq c-basic-offset 4)))
(add-hook 'go-mode-hook '(lambda () (progn 
                                 (esk-prog-mode-hook)
                                 (google-make-newline-indent)
                                 (auto-complete-mode))))
(add-hook 'go-mode-hook '(lambda () (setq c-basic-offset 4)))
(add-hook 'clojure-mode-hook 'paredit-mode)


(add-hook 'c-mode-common-hook 'google-set-c-style)
(add-hook 'c-mode-common-hook 'google-make-newline-indent)
(add-hook 'emacs-lisp-mode-hook 'paredit-mode)

;; multi-term
(defun toggle-dedicated-term ()
  (interactive)
  (if (multi-term-dedicated-exist-p)
      (multi-term-dedicated-close)
    (progn 
      (multi-term-dedicated-open)
      (multi-term-dedicated-select))))

(setq multi-term-program "/bin/zsh")
(setq multi-term-dedicated-window-height 20)
(setq multi-term-dedicated-max-window-height 30)
(global-set-key (kbd "C-x C-m") 'toggle-dedicated-term)
(global-set-key (kbd "C-x m") 'toggle-dedicated-term)
(setq system-uses-terminfo nil)

(global-set-key (kbd "C-x g") 'magit-status)

;; keybind
(add-hook 'eshell-mode-hook
          (lambda ()
            (local-unset-key (kbd "M-RET"))))

(global-set-key (kbd "C-x C-n") (lambda () (interactive) (other-window 1)))
(global-set-key (kbd "M-n") 'mark-sexp)
(global-set-key (kbd "M-RET") 'anything)

;; js 
(autoload 'js2-mode "js2-mode" nil t)
(add-to-list 'auto-mode-alist '("\\.js$" . js2-mode))
(setq js2-highlight-level 3)
(setq js2-basic-offset 2)
(setq js-indent-level 2)

(add-hook 'coffee-mode-hook '(lambda () (progn 
                                     (setq tab-width 2)
                                     (setq coffee-tab-width 2))))

;; tmpl engine
; (add-to-list 'auto-mode-alist '("\\.hbs$" . nxml-mode))

;; (eval-after-load "clojure-mode"
;;  '(progn
;;     (require 'slime)
;;     (require 'clojure-mode)
;;     (define-key clojure-mode-map (kbd "M-/")  (quote slime-complete-symbol))
;;     (define-key clojure-mode-map (kbd "C-c s")  (quote slime-selector))
;;     (unless (slime-connected-p)
;;       (save-excursion (clojure-jack-in)))))

(defun revert-all-buffers ()
  "Refreshes all open buffers from their respective files."
  (interactive)
  (dolist (buffer (buffer-list))
    (with-current-buffer buffer
      (when (and (buffer-file-name)
                 (not (buffer-modified-p)))
        (if (file-exists-p (buffer-file-name))
            (revert-buffer t t t)))))
  (message "Refresh open files."))

;; google translate

(require 'google-translate)
(setq google-translate-default-source-language "en")
(setq google-translate-default-target-language "zh-CN")
(global-set-key (kbd "C-c g") 'google-translate-at-point)

;; yasnippet
(require 'yasnippet)
(yas-global-mode 1)

(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(hl-line ((t (:inherit highlight :background "gray18")))))
